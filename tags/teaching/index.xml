<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>teaching on Taq Karim</title>
    <link>https://mottaquikarim.github.io/dev/tags/teaching/</link>
    <description>Recent content in teaching on Taq Karim</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Mon, 16 Mar 2020 06:31:03 +0000</lastBuildDate>
    
	<atom:link href="https://mottaquikarim.github.io/dev/tags/teaching/index.xml" rel="self" type="application/rss+xml" />
    
    
    
    <item>
      <title>Observation About Twin Primes</title>
      <link>https://mottaquikarim.github.io/dev/posts/observation-about-twin-primes/</link>
      <pubDate>Thu, 08 Dec 2022 10:24:40 +0000</pubDate>
      
      <guid>https://mottaquikarim.github.io/dev/posts/observation-about-twin-primes/</guid>
      <description>A twin prime is a prime number that is either 2 less or 2 more than another prime number‚Äîfor example, either member of the twin prime pair (41, 43).
 (source)
So I realized something interesting the other day, given twin primes \(p, p+2\) and \(q\) the number occurring in between:
   p q p + 2 is \(q \) a multiple of 6?     \( 2 \) \( 3 \) \( 4 \) no   \( 3 \) \( 4 \) \( 5 \) no   \( 5 \) \( 6 \) \( 7 \) yes, \( 6 * 1 \)   \( 11 \) \( 12 \) \( 13 \) yes, \( 6 * 2 \)   \( 17 \) \( 18 \) \( 19 \) yes, \( 6 * 3 \)   \( 29 \) \( 30 \) \( 31 \) yes, \( 6 * 5 \)   \( 41 \) \( 42 \) \( 43 \) yes, \( 6 * 7 \)   \( 59 \) \( 60 \) \( 61 \) yes, \( 6 * 10 \)   \( 71 \) \( 72 \) \( 73 \) yes, \( 6 * 12 \)    Note that \( q \) is always divisible by \( 6 \)!</description>
    </item>
    
    
    
    <item>
      <title>üçû The K-Prime üçû</title>
      <link>https://mottaquikarim.github.io/dev/posts/the-k-prime/</link>
      <pubDate>Sat, 03 Dec 2022 05:27:51 +0000</pubDate>
      
      <guid>https://mottaquikarim.github.io/dev/posts/the-k-prime/</guid>
      <description>Table of Contents  Hol up. Remember this? üçû The Semiprime üçû
Towards the bottom, I made a bold claim!
 I don&amp;rsquo;t know how to prove this yet (and I could be very wrong here!) but I would bet that the longest consecutive sequence of k-primes possible is always k+1. For instance, with primes, the longest consecutive sequence possible is 2, eg: \([2,3]\) since primes can be thought of as k-prime numbers where k=1.</description>
    </item>
    
    
    
    <item>
      <title>Novel Algorithm(?) for Generating Pythagorean Triples</title>
      <link>https://mottaquikarim.github.io/dev/posts/novel-algorithm-for-generating-pythagorean-triples/</link>
      <pubDate>Mon, 28 Nov 2022 07:18:09 +0000</pubDate>
      
      <guid>https://mottaquikarim.github.io/dev/posts/novel-algorithm-for-generating-pythagorean-triples/</guid>
      <description>Table of Contents  Background The pythagorean theorem states that given any right triangle with legs \(a \), \(b\) and hypotenuse \(c\):
$$ a^2 + b^2 = c^2 $$
(For those who are curious to learn more, please check out wikipedia)
A pythagorean triple is a set of three natural numbers (\(a,b,c\)) such that \( a^2 + b^2 = c^2 \). We express such a triple as \( \big( a,b,c \big) \) with the understanding that \( c \) is the hypotenuse.</description>
    </item>
    
    
    
    <item>
      <title>Fifth Generic Trick for Squaring All Numbers</title>
      <link>https://mottaquikarim.github.io/dev/posts/fifth-generic-trick-for-squaring-all-numbers/</link>
      <pubDate>Mon, 28 Nov 2022 06:52:49 +0000</pubDate>
      
      <guid>https://mottaquikarim.github.io/dev/posts/fifth-generic-trick-for-squaring-all-numbers/</guid>
      <description>Table of Contents  Ok so for this one, no proof (at least not yet). But, we will demonstrate by example.
Squaring \( \bold{30} \)s Let&amp;rsquo;s begin here.
   Number Square     \( 30^2 \) \(900\)   \( 31^2 \) \(961\)   \( 32^2 \) \(1024\)   \( 33^2 \) \(1089\)   \( 34^2 \) \(1156\)   \( 35^2 \) \(1225\)   \( 36^2 \) \(1296\)   \( 39^2 \) \(1521\)    So far, there&amp;rsquo;s no real pattern here.</description>
    </item>
    
    
    
    <item>
      <title>Fourth Generic Trick for Squaring All Numbers</title>
      <link>https://mottaquikarim.github.io/dev/posts/fourth-generic-trick-for-squaring-all-numbers/</link>
      <pubDate>Mon, 28 Nov 2022 06:22:00 +0000</pubDate>
      
      <guid>https://mottaquikarim.github.io/dev/posts/fourth-generic-trick-for-squaring-all-numbers/</guid>
      <description>Table of Contents  This approach my friends is pretty damn cool üòé.
Derivation Let&amp;rsquo;s get straight to the derivation here as IMO that is the best way to grok this problem. Suppose we have some number - let&amp;rsquo;s say 82 - that we&amp;rsquo;d like to square.
Moreover, suppose there was a number close to 82 that we knew how to square easily. In this case, let&amp;rsquo;s go with 80 since \( 80^2 = \bold{6400} \) (and this is something we can easily compute mentally).</description>
    </item>
    
    
    
    <item>
      <title>Third Generic Trick for Squaring All Numbers</title>
      <link>https://mottaquikarim.github.io/dev/posts/third-generic-trick-for-squaring-all-numbers/</link>
      <pubDate>Mon, 28 Nov 2022 05:35:45 +0000</pubDate>
      
      <guid>https://mottaquikarim.github.io/dev/posts/third-generic-trick-for-squaring-all-numbers/</guid>
      <description>Table of Contents  TL;DR: The Trick. \(\bold{56}^2\) $$ \begin{aligned} (56)^2 &amp;amp;= (\bold{55} + 1)^2 \cr &amp;amp;= 3025 + \bold{2}(55) + 1 \cr &amp;amp;= 3025 + 110 + 1 \cr &amp;amp;= 3136 \end{aligned} $$
Note that:
 \(55^2\) can be computed using the ending in 5 trick the really important part here is the \(\bold{2}*55\) bit this applies generally but becomes less useful the further we get from a number ending in 5.</description>
    </item>
    
    
    
    <item>
      <title>Trick for Squaring 40s (and 50s)</title>
      <link>https://mottaquikarim.github.io/dev/posts/trick-for-squaring-40s-and-50s/</link>
      <pubDate>Sun, 20 Nov 2022 22:36:58 +0000</pubDate>
      
      <guid>https://mottaquikarim.github.io/dev/posts/trick-for-squaring-40s-and-50s/</guid>
      <description>Table of Contents  The Trick (I) Here&amp;rsquo;s a really cute trick for squaring numbers in the \(40\)s.
$$ \begin{aligned} 40^2 &amp;amp;= 1600 \cr &amp;amp;= [16] \text{ and } [00] \cr 41^2 &amp;amp;= 1681 \cr &amp;amp;= [16] \text{ and } [81] \cr &amp;amp;= [16 + 0] \text{ and } [9^2] \cr 42^2 &amp;amp;= 1764 \cr &amp;amp;= [17] \text{ and } [64] \cr &amp;amp;= [16 + 1] \text{ and } [8^2] \cr &amp;amp;= [16 + \bold{1}] \text{ and } [(10-\bold{2})^2] \cr 43^2 &amp;amp;= 1849 \cr &amp;amp;= [18] \text{ and } [49] \cr &amp;amp;= [16 + \bold{2}] \text{ and } [(10-\bold{3})^2] \cr 44^2 &amp;amp;= 1936 \cr &amp;amp;= [19] \text{ and } [36] \cr &amp;amp;= [16 + \bold{3}] \text{ and } [(10-\bold{4})^2] \cr 45^2 &amp;amp;= 2025 \cr &amp;amp;= [20] \text{ and } [25] \cr &amp;amp;= [16 + \bold{4}] \text{ and } [(10-\bold{5})^2] \cr \end{aligned} $$</description>
    </item>
    
    
    
    <item>
      <title>The Semiprime Sandwich</title>
      <link>https://mottaquikarim.github.io/dev/posts/the-semiprime-sandwich/</link>
      <pubDate>Sun, 20 Nov 2022 21:29:05 +0000</pubDate>
      
      <guid>https://mottaquikarim.github.io/dev/posts/the-semiprime-sandwich/</guid>
      <description>Table of Contents  Lol, wut? I had the opportunity to catch up with my old friend, Chai, earlier this week. It has been a while since we talked and the topic of aging and birthdays came up.
Chai is turning 32, or \(2^5\) years old(!!), later on this year. This is the (reasonably speaking) penultimate \(2^n\)th of age in most of our lives: while an uncomfortable thought, it is highly unlikely anyone reading this article in the year 2022 will live to the age of \(2^7\)).</description>
    </item>
    
    
    
    <item>
      <title>Second Generic Identity for Squaring All Numbers</title>
      <link>https://mottaquikarim.github.io/dev/posts/second-generic-identity-for-squaring-all-numbers/</link>
      <pubDate>Mon, 12 Sep 2022 00:48:23 +0000</pubDate>
      
      <guid>https://mottaquikarim.github.io/dev/posts/second-generic-identity-for-squaring-all-numbers/</guid>
      <description>Table of Contents  Part 1: the Basic Trick Let&amp;rsquo;s begin with a very simplistic version of this trick.
Consider:
$$ \begin{aligned} 11 ^ 2 &amp;amp;= ? \cr &amp;amp;= 10 * 10 + 11 + 10 \cr &amp;amp;= 100 + 21 \cr &amp;amp;= 121 \end{aligned} $$
In words:
 Suppose we have a number N to square. If we know the square of N-1, the square of N is simply (N-1)(N-1) plus N plus N-1.</description>
    </item>
    
    
    
    <item>
      <title>Generic Trick for Squaring All Numbers</title>
      <link>https://mottaquikarim.github.io/dev/posts/generic-trick-for-squaring-all-numbers/</link>
      <pubDate>Mon, 05 Sep 2022 04:28:00 +0000</pubDate>
      
      <guid>https://mottaquikarim.github.io/dev/posts/generic-trick-for-squaring-all-numbers/</guid>
      <description>Table of Contents  TL;DR: The Trick. Let&amp;rsquo;s first grok the trick just by pattern recognition.
Example: 31^2= $$ \begin{aligned} 3\bold{1}^2 &amp;amp;= (\bold{3} * 10 + \bold{1}) \cr \bold{3} * (3\bold{1} + \bold{1}) &amp;amp;= 96\text{\textunderscore} \cr 1^2 &amp;amp;= \space\space\space\space 1\cr \hline &amp;amp;= 961 \end{aligned} $$
Example: 54^2= $$ \begin{aligned} 5\bold{4}^2 &amp;amp;= (\bold{5} * 10 + \bold{4}) \cr \bold{5} * (5\bold{4} + \bold{4}) &amp;amp;= 290\text{\textunderscore} \cr 4^2 &amp;amp;= \space\space\space\space 16\cr \hline &amp;amp;= 2916 \end{aligned} $$</description>
    </item>
    
    
    
    <item>
      <title>Demonstrating a Trick for Squaring Numbers Ending in 6</title>
      <link>https://mottaquikarim.github.io/dev/posts/demonstrating-a-trick-for-squaring-numbers-ending-in-6/</link>
      <pubDate>Sun, 04 Sep 2022 11:13:37 +0000</pubDate>
      
      <guid>https://mottaquikarim.github.io/dev/posts/demonstrating-a-trick-for-squaring-numbers-ending-in-6/</guid>
      <description>Table of Contents  NOTE: This post builds on my post &amp;ldquo;Proving the Squaring Numbers Ending in 5 Trick&amp;rdquo;. I&amp;rsquo;ll be heavily referencing it in this post.
Methodology. In my last post on this topic (referenced above), we proved that numbers ending in &amp;ndash;5 have a neat property, namely that if:
$$ \begin{aligned} \text{Let: } \cr a &amp;amp;= (10t + n) \cr \text{Where: } \cr n &amp;amp;= 5 \cr \end{aligned} $$</description>
    </item>
    
    
    
    <item>
      <title>Proving the Squaring Numbers Ending in 5 Trick</title>
      <link>https://mottaquikarim.github.io/dev/posts/proving-the-squaring-numbers-ending-in-5-trick/</link>
      <pubDate>Sun, 04 Sep 2022 00:46:49 +0000</pubDate>
      
      <guid>https://mottaquikarim.github.io/dev/posts/proving-the-squaring-numbers-ending-in-5-trick/</guid>
      <description>Table of Contents  So here‚Äôs a neat trick. What‚Äôs a quick way to square numbers that end in ‚Äî 5 in your head?
For example, what is $$25*25 = ?$$
(Plug into a calculator real quick). We expect our trick to help up compute the solution, 625, quickly.
Ok, let‚Äôs break down the approach.
Example: what is 25^2?. First, let&amp;rsquo;s re-write our number (25) in a slightly different but equivalent manner:</description>
    </item>
    
    
    
    <item>
      <title>A Hack for Transferring Cross Domain Localstorage Data</title>
      <link>https://mottaquikarim.github.io/dev/posts/a-hack-for-transferring-cross-domain-localstorage-data/</link>
      <pubDate>Wed, 02 Feb 2022 08:24:42 +0000</pubDate>
      
      <guid>https://mottaquikarim.github.io/dev/posts/a-hack-for-transferring-cross-domain-localstorage-data/</guid>
      <description>Table of Contents  BLUF
üéâ Wordle has been purchased by the NYTimes!
üê±‚Äçüíª I wanted to cache the game in its current state, so I downloaded source and uploaded to my own server: Wordle Classic
ü§î But! I wanted to transfer my streaks data to my new hosted app
üí° Thanks to javascript: and a small code addition to Wordle Classic, I was able to transfer my streaks without having to open up Chrome&amp;rsquo;s Dev Console</description>
    </item>
    
    
    
    <item>
      <title>Reverse Engineering Wordle</title>
      <link>https://mottaquikarim.github.io/dev/posts/reverse-engineering-wordle/</link>
      <pubDate>Mon, 24 Jan 2022 12:24:16 +0000</pubDate>
      
      <guid>https://mottaquikarim.github.io/dev/posts/reverse-engineering-wordle/</guid>
      <description>Table of Contents  BLUF
üëÄ I looked into + grokked Wordle&amp;rsquo;s javascript source code
üê±üíª Then, I managed to come up with a workaround that enables loading any previous word of the day puzzle
üôå I wrote a little tool to load the original Wordle site but with my &amp;ldquo;hack&amp;rdquo; injected allowing anyone to play any past word of the day puzzle. I call it: Wordle Time Machine (EDIT: v2 can be found here) üéâ</description>
    </item>
    
    
    
    <item>
      <title>A technique for saving content from a `data:text/html` URI</title>
      <link>https://mottaquikarim.github.io/dev/posts/a-technique-for-saving-content-from-a-datatext/html-uri/</link>
      <pubDate>Sat, 22 Jan 2022 12:39:04 +0000</pubDate>
      
      <guid>https://mottaquikarim.github.io/dev/posts/a-technique-for-saving-content-from-a-datatext/html-uri/</guid>
      <description>Table of Contents  OMG! I finally got it. üôå
BLUF
üôå Turn your chrome tab into a &amp;ldquo;notepad&amp;rdquo; using: data:text/html, &amp;lt;html contenteditable&amp;gt; (copy and paste this into your URL bar to test it out)
üö® But! If you hit back or refresh by accident, you lose your notes (this sucks)
‚úÖ Using javsacript&amp;rsquo;s clipboard functionality, I came up with a solution that updates the clipboard (eg: available to recover by &amp;ldquo;pasting&amp;rdquo; into your favorite word editor) everytime you type in to the &amp;ldquo;notepad&amp;rdquo;.</description>
    </item>
    
    
    
    <item>
      <title>setInterval that blocks on `await`</title>
      <link>https://mottaquikarim.github.io/dev/posts/setinterval-that-blocks-on-await/</link>
      <pubDate>Wed, 19 Jan 2022 22:39:04 +0000</pubDate>
      
      <guid>https://mottaquikarim.github.io/dev/posts/setinterval-that-blocks-on-await/</guid>
      <description>Table of Contents  setInterval and promises in javascript David Walsh asks on twitter
 Does anyone have a good example of chaining promises with setInterval so that multiple promises aren&amp;rsquo;t created concurrently?
 Example of problem
setInterval(async () =&amp;gt; { const result = await someAsyncFunc(); // The problem is that `someAsyncFunc` could hang during one of the loops,  // which would allow multiple active awaits }, 2000);  To expound on this issue:</description>
    </item>
    
    
    
    <item>
      <title>Immediately Execute Initial Conditions w/SetInterval in Javascipt</title>
      <link>https://mottaquikarim.github.io/dev/posts/immediately-execute-initial-conditions-w/setinterval-in-javascipt/</link>
      <pubDate>Mon, 17 Jan 2022 22:39:04 +0000</pubDate>
      
      <guid>https://mottaquikarim.github.io/dev/posts/immediately-execute-initial-conditions-w/setinterval-in-javascipt/</guid>
      <description>Table of Contents  I stumbled on David Welsh&amp;rsquo;s &amp;ldquo;Immediately Executing setInterval with JavaScript&amp;rdquo; blog post the other day.
IIFE for setInterval in javascript In particular, this struck me as interesting:
 If you truly want to isolate the function call to the setInterval, you can use this trick of self-executing function that returns itself:
 // Use a named function ... setInterval(function myFunction() { // Do some stuff  // .</description>
    </item>
    
    
    
    <item>
      <title>Hacking Python With Spells From Harry Potter</title>
      <link>https://mottaquikarim.github.io/dev/posts/hacking-python-with-spells-from-harry-potter/</link>
      <pubDate>Sat, 20 Mar 2021 18:19:39 +0000</pubDate>
      
      <guid>https://mottaquikarim.github.io/dev/posts/hacking-python-with-spells-from-harry-potter/</guid>
      <description>Table of Contents  This post is intended to be a follow-up/continuation of my discussion around cpython and grokking (generally speaking) how the language works &amp;ldquo;under the hood&amp;rdquo;.
(For better context, I&amp;rsquo;d recommend first reading the previous post(s) in this series:
 &amp;ldquo;Grokking Builtin.all in Python&amp;rdquo; &amp;ldquo;Extending Python&amp;rsquo;s Builtin C Modules&amp;rdquo;  (That being said, this post is relatively stand alone and you can just probably make do ok reading this without looking at the previous parts).</description>
    </item>
    
    
    
    <item>
      <title>Extending Pythons Builtin C Modules</title>
      <link>https://mottaquikarim.github.io/dev/posts/extending-pythons-builtin-c-modules/</link>
      <pubDate>Wed, 17 Mar 2021 20:58:20 +0000</pubDate>
      
      <guid>https://mottaquikarim.github.io/dev/posts/extending-pythons-builtin-c-modules/</guid>
      <description>Table of Contents  This post is intended to be a follow-up/continuation of my discussion around cpython and grokking (generally speaking) how all(...) works.
(For better context, I&amp;rsquo;d recommend first reading the previous post in this series, &amp;ldquo;Grokking Builtin.all in Python&amp;rdquo;)
Having understood how the builtin_all method behaves, we now turn our attention to how we might be able to either &amp;ldquo;hack&amp;rdquo; builtin_all to accommodate our intended use case (for no reason except for our own education) or more generally speaking, how we might define a new method that specifically checks to see if all items in the iterable are equivalent.</description>
    </item>
    
    
    
    <item>
      <title>Grokking Builtin.all in Python</title>
      <link>https://mottaquikarim.github.io/dev/posts/grokking-builtin.all-in-python/</link>
      <pubDate>Tue, 16 Mar 2021 22:26:46 +0000</pubDate>
      
      <guid>https://mottaquikarim.github.io/dev/posts/grokking-builtin.all-in-python/</guid>
      <description>Table of Contents  A coworker shared this neat code snippet on slack:
&amp;gt;&amp;gt;&amp;gt; all([0, 0, 0]) False &amp;gt;&amp;gt;&amp;gt; all([1, 1, 1]) True and mused to us all:
 this is annoying  &amp;ndash; venerated colleague, circa 2021
 Indeed he&amp;rsquo;s right! It is annoying. His note piqued my curiousity as to why/how this worked under the hood; in this post I take a dive into the guts of cpython searching for answers.</description>
    </item>
    
    
    
    <item>
      <title>Hacking the Covid Appointment Queue</title>
      <link>https://mottaquikarim.github.io/dev/posts/hacking-the-covid-appointment-queue/</link>
      <pubDate>Sat, 27 Feb 2021 19:45:28 +0000</pubDate>
      
      <guid>https://mottaquikarim.github.io/dev/posts/hacking-the-covid-appointment-queue/</guid>
      <description>Table of Contents  TL;DR: By examining the minified source code of the Rite Aid Immunization Scheduler I was able to figure out a way to book vaccine appointments for my (eligible &amp;ndash; obviously) loved ones and family friends. So far my method has successfully booked appointments for 8 individuals w/pre-existing conditions living in various parts of New Jersey.
The Problem A few close family members of mine have pre-existing conditions making them eligible to get the COVID vaccine.</description>
    </item>
    
    
    
    <item>
      <title>Hello, Wrold from Colab</title>
      <link>https://mottaquikarim.github.io/dev/posts/hello-wrold-from-colab/</link>
      <pubDate>Thu, 28 Jan 2021 04:01:51 +0000</pubDate>
      
      <guid>https://mottaquikarim.github.io/dev/posts/hello-wrold-from-colab/</guid>
      <description>Table of Contents   Hello, Wrold, from Google Colab!!
 Here is the colab doc for those following along at home).
What? This is a post composed in Google Colab as a demonstration of feasibility that blog posts can be generated from a colab notebook.
In fact, any ipynb file is fair game - just drop it in to a particular folder and on build, it will be converted to a markdown file, &amp;ldquo;sanitized&amp;rdquo; and then available as a normal post on Hugo.</description>
    </item>
    
    
    
    <item>
      <title>Handling Parquet Schema Mismatch Based on Data</title>
      <link>https://mottaquikarim.github.io/dev/posts/handling-parquet-schema-mismatch-based-on-data/</link>
      <pubDate>Sun, 24 Jan 2021 05:38:50 +0000</pubDate>
      
      <guid>https://mottaquikarim.github.io/dev/posts/handling-parquet-schema-mismatch-based-on-data/</guid>
      <description>Table of Contents  TL;DR: explicitly define your parquet schema when reading/writing from pq tables if you want to maintain consistent datatypes even when column values are null.
The Problem Consider the following pandas dataframe, written into parquet format:
import pandas as pd import pyarrow as pa import pyarrow.parquet as pq df = pd.DataFrame( { &amp;#39;organizationId&amp;#39; : [&amp;#39;org1&amp;#39;, &amp;#39;org2&amp;#39;, &amp;#39;org3&amp;#39;], &amp;#39;customerProducts&amp;#39; : [[&amp;#39;p1&amp;#39;, &amp;#39;p2&amp;#39;], [&amp;#39;p4&amp;#39;, &amp;#39;p5&amp;#39;], [&amp;#39;p1&amp;#39;, &amp;#39;p3&amp;#39;]] } ) table = pa.</description>
    </item>
    
    
    
    <item>
      <title>You might not be using json.Decoder correctly in golang</title>
      <link>https://mottaquikarim.github.io/dev/posts/you-might-not-be-using-json.decoder-correctly-in-golang/</link>
      <pubDate>Sun, 24 Jan 2021 04:01:51 +0000</pubDate>
      
      <guid>https://mottaquikarim.github.io/dev/posts/you-might-not-be-using-json.decoder-correctly-in-golang/</guid>
      <description>Table of Contents  TL;DR: prevailing &amp;ldquo;secondary source&amp;rdquo; wisdom (ie: blog posts) about json.Decoder don&amp;rsquo;t demonstrate the proper way to use it.
This post is a follow up to my (kinda lengthy) deep dive into what I thought was a bug in golang&amp;rsquo;s json.Decoder pkg.
Instead, I realized that generally speaking, json.Decoder can be misunderstood - which may lead to unintended consequences. In this post, I will demonstrate a safer pattern that ought to be used instead of the prevailing wisdom.</description>
    </item>
    
    
    
    <item>
      <title>Is json.Decoder broken in golang?!</title>
      <link>https://mottaquikarim.github.io/dev/posts/is-json.decoder-broken-in-golang/</link>
      <pubDate>Thu, 14 Jan 2021 01:26:01 +0000</pubDate>
      
      <guid>https://mottaquikarim.github.io/dev/posts/is-json.decoder-broken-in-golang/</guid>
      <description>Table of Contents  TL;DR: No.
Although unintuitive, json.Decoder isn&amp;rsquo;t actually broken! However, some of its behavior can appear seemingly wrong when used incorrectly. (Tread carefully.)
In this post, I will dive into the src code of json.Decoder and explore how it works; then I will make sense of these observed &amp;ldquo;incorrect&amp;rdquo; behaviors.
&amp;ndash;
The &amp;ldquo;Issue&amp;rdquo; Let us start with a simple demonstration of the problem. Consider the following:</description>
    </item>
    
    
    
    
    
    <item>
      <title>Using Makefile &#43; Docker for Golang dev</title>
      <link>https://mottaquikarim.github.io/dev/posts/using-makefile-docker-for-golang-dev/</link>
      <pubDate>Fri, 08 Jan 2021 02:29:26 +0000</pubDate>
      
      <guid>https://mottaquikarim.github.io/dev/posts/using-makefile-docker-for-golang-dev/</guid>
      <description>Table of Contents  (This post was inspired by this article on medium.)
For starters, I&amp;rsquo;d highly recommend reading the article I linked to first. Leo&amp;rsquo;s points about why he chooses Make resonate strongly with me.
In this post, I&amp;rsquo;ll expand slightly on his Makefile and share how make targets can be leveraged with docker for golang development.
(Of course, we can apply this principle to dev with other langs too, but for now let&amp;rsquo;s stick with go).</description>
    </item>
    
    
    
    <item>
      <title>Custom Args in Makefile</title>
      <link>https://mottaquikarim.github.io/dev/posts/custom-args-in-makefile/</link>
      <pubDate>Sun, 03 Jan 2021 00:59:04 +0000</pubDate>
      
      <guid>https://mottaquikarim.github.io/dev/posts/custom-args-in-makefile/</guid>
      <description>Table of Contents  TL;DR: use $(eval ARGS=${ARGS} [some additional arg]) within a make target to build custom argument sequences for commands wrapped by make targets - like make test
I expound further on the usecase and methodology below üëá
I like to wrap common tasks, such as running unit tests, around a make target.
This way, I can minimize the length of the command I need to run (ie: make test vs go test .</description>
    </item>
    
    
    
    <item>
      <title>Integrating Code Climate w/go pkgs</title>
      <link>https://mottaquikarim.github.io/dev/posts/integrating-code-climate-w/go-pkgs/</link>
      <pubDate>Fri, 01 Jan 2021 14:28:32 +0000</pubDate>
      
      <guid>https://mottaquikarim.github.io/dev/posts/integrating-code-climate-w/go-pkgs/</guid>
      <description>Table of Contents  TL; DR: When integrating golang code coverage with Code Climate, be sure to set the --prefix arg (set it to your pkg github prefix, ie: &amp;ldquo;github.com/mottaquikarim/esquerydsl&amp;rdquo;) in the after-build stage in order for your src code to be recognized by the test reporter.
If ^^ that didn&amp;rsquo;t make sense, read on below for the full background üëç
I&amp;rsquo;ve recently published a golang pkg, called esquerydsl, which facillitates safe construction of elasticsearch queries in golang.</description>
    </item>
    
    
    
    <item>
      <title>Generate Lambda Layer Artifacts w/Docker</title>
      <link>https://mottaquikarim.github.io/dev/posts/generate-lambda-layer-artifacts-w/docker/</link>
      <pubDate>Tue, 22 Dec 2020 16:41:25 +0000</pubDate>
      
      <guid>https://mottaquikarim.github.io/dev/posts/generate-lambda-layer-artifacts-w/docker/</guid>
      <description>Table of Contents  This post (and accompanying code) was inspired by this tutorial and a need to easily generate lambda layer artifacts for a grad course I teach at Baruch University.
Github
TL;DR: Generate a lambda layer artifact for python using this:
‚ûú cat &amp;gt;&amp;gt; requirements.txt requests==2.24.0 ‚ûú docker run -v $PWD:/data mottaquikarim/pkglambdalayer:latest On completion, expect the following:
‚ûú ls -ahl total 1792 drwxr-xr-x 5 tkarim staff 160B Dec 21 08:36 .</description>
    </item>
    
    
    
    <item>
      <title>Safely Construct Elasticsearch Queries w/Golang</title>
      <link>https://mottaquikarim.github.io/dev/posts/safely-construct-elasticsearch-queries-w/golang/</link>
      <pubDate>Wed, 16 Dec 2020 14:28:28 +0000</pubDate>
      
      <guid>https://mottaquikarim.github.io/dev/posts/safely-construct-elasticsearch-queries-w/golang/</guid>
      <description>Table of Contents  TL; DR: ya boy wrote a golang elasticsearch query dsl utility. Find it here!
The Why If you&amp;rsquo;ve used elasticsearch with golang, then you&amp;rsquo;ve probably used the official elasticsearch go client.
The es go client is exhaustive and generally, pretty great. However, it can be a bit&amp;hellip;scary when having to deal with constructing search queries using the elasticsearch query dsl
Take for instance the following (from here in the docs):</description>
    </item>
    
    
    
    <item>
      <title>Gotcha w/comparing base64 encoded strs</title>
      <link>https://mottaquikarim.github.io/dev/posts/gotcha-w/comparing-base64-encoded-strs/</link>
      <pubDate>Sun, 13 Dec 2020 09:29:57 +0000</pubDate>
      
      <guid>https://mottaquikarim.github.io/dev/posts/gotcha-w/comparing-base64-encoded-strs/</guid>
      <description>Table of Contents  Here&amp;rsquo;s a fun experiment - consider two &amp;ldquo;numerical&amp;rdquo; strings such as:
a = &amp;#34;1004&amp;#34; b = &amp;#34;1053&amp;#34; Is a &amp;lt; b? Why yes, of course it is!
Ok, let&amp;rsquo;s try this again, this time b64encoding our two strings.
import base64 a_b64 = base64.b64encode(a.encode(&amp;#34;utf8&amp;#34;)).decode(&amp;#34;utf8&amp;#34;) # MTAwNA== b_b64 = base64.b64encode(b.encode(&amp;#34;utf8&amp;#34;)).decode(&amp;#34;utf8&amp;#34;) # MTA1Mw== How about now?
Is a_b64 &amp;lt; b_b64? NOPE.
What gives?!
And more importantly, this observation implies that:</description>
    </item>
    
    
    
    <item>
      <title>Connecting to Elasticsearch Configured via Docker</title>
      <link>https://mottaquikarim.github.io/dev/posts/connecting-to-elasticsearch-configured-via-docker/</link>
      <pubDate>Mon, 16 Mar 2020 06:37:08 +0000</pubDate>
      
      <guid>https://mottaquikarim.github.io/dev/posts/connecting-to-elasticsearch-configured-via-docker/</guid>
      <description>Table of Contents  Elastic Search and Docker Setting up an elasticsearch + kibana runtime is very easy to do with docker-compose:
version:&amp;#39;3&amp;#39;services:elasticsearch:image:docker.elastic.co/elasticsearch/elasticsearch:6.3.2environment:-cluster.name=docker-cluster-bootstrap.memory_lock=true-&amp;#34;ES_JAVA_OPTS=-Xms512m -Xmx512m&amp;#34;ulimits:memlock:soft:-1hard:-1ports:-&amp;#34;9200:9200&amp;#34;kibana:image:docker.elastic.co/kibana/kibana:6.3.2ports:-&amp;#34;5601:5601&amp;#34; For more information on the defaults (ulimits or environment variables, please see this post)
To run, you simply:
docker-compose up -d And then navigate over to http://localhost:9200 for elasticsearch or http://localhost:5601 for kibana.
Gotchas As with all things, there may be some gotchas associated with this setup.</description>
    </item>
    
    
    
    <item>
      <title>Self Grading Quizzes With Airtable</title>
      <link>https://mottaquikarim.github.io/dev/posts/self-grading-quizzes-with-airtable/</link>
      <pubDate>Mon, 16 Mar 2020 06:31:03 +0000</pubDate>
      
      <guid>https://mottaquikarim.github.io/dev/posts/self-grading-quizzes-with-airtable/</guid>
      <description>Table of Contents  This semester, I am teaching a course at Baruch University on Big Data Technologies.
I resolved to administer a small quiz at the start of class to get a feel for how the class is doing overall in terms of comprehension of key materials.
However, grading quizzes - especially at such a recurring cadence - will definitely be time consuming, even for a small class of say 15 people (my class has 47 students).</description>
    </item>
    
    
  </channel>
</rss>
